name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16.13'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install Yarn
      run: npm install -g yarn@latest
      
    - name: Install dependencies
      run: yarn install
      
    - name: Check Node.js version
      run: node --version
      
    - name: Run Tests
      run: |
        output=$(npm run test)
        if [[ "$output" != *"Fake test"* ]]; then
          echo "Error: Tests failed"
          exit 1
        fi
      working-directory: ./app


  deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: production
        needs: build

        env:
          AWS_REGION: us-east-1
          ECR_REPOSITORY: my-repo
          ECS_SERVICE: my-service
          ECS_CLUSTER: my-cluster
          ECS_TASK_DEFINITION: task_definition.json
          CONTAINER_NAME: teste-devops

 
      
        steps:
          - name: Checkout
            uses: actions/checkout@v4
      
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}
      
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@cc03dd1c0bf990dc30ab360f4f39614f94e96cce
      
          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              IMAGE_TAG: ${{ github.sha }}
            run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          - name: Replace credentials
            run: |
                sed -i 's/__AWS_ACCONT_COD__/${{ secrets.AWS_ACCONT_COD }}/g' task_definition.json
            
      
          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: ${{ env.ECS_TASK_DEFINITION }}
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ steps.build-image.outputs.image }}
      
          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true

      